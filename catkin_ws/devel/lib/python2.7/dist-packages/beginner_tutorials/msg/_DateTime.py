"""autogenerated by genpy from beginner_tutorials/DateTime.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class DateTime(genpy.Message):
  _md5sum = "7e9ed7f8079280832cde846e0b39652f"
  _type = "beginner_tutorials/DateTime"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 year
string month
int32 day
int8 hour
int8 minute
int8 seconds
"""
  __slots__ = ['year','month','day','hour','minute','seconds']
  _slot_types = ['int32','string','int32','int8','int8','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       year,month,day,hour,minute,seconds

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DateTime, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.year is None:
        self.year = 0
      if self.month is None:
        self.month = ''
      if self.day is None:
        self.day = 0
      if self.hour is None:
        self.hour = 0
      if self.minute is None:
        self.minute = 0
      if self.seconds is None:
        self.seconds = 0
    else:
      self.year = 0
      self.month = ''
      self.day = 0
      self.hour = 0
      self.minute = 0
      self.seconds = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_i.pack(self.year))
      _x = self.month
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_i3b.pack(_x.day, _x.hour, _x.minute, _x.seconds))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (self.year,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.month = str[start:end].decode('utf-8')
      else:
        self.month = str[start:end]
      _x = self
      start = end
      end += 7
      (_x.day, _x.hour, _x.minute, _x.seconds,) = _struct_i3b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_i.pack(self.year))
      _x = self.month
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_i3b.pack(_x.day, _x.hour, _x.minute, _x.seconds))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (self.year,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.month = str[start:end].decode('utf-8')
      else:
        self.month = str[start:end]
      _x = self
      start = end
      end += 7
      (_x.day, _x.hour, _x.minute, _x.seconds,) = _struct_i3b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i = struct.Struct("<i")
_struct_i3b = struct.Struct("<i3b")
